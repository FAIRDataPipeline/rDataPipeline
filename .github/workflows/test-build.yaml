on:
  push:
    branches:
      - '*'
#  pull_request:
#    branches:
#      - master

jobs:
  R-CMD-check:
    # If the commit message isn't [skip ci]
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    # Use a matrix to define what operating systems to run on
    runs-on: ${{ matrix.config.os }}
    # Name the job dynamically based on OS and R version
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false

      # Define operating systems
      matrix:
        config:
          # - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          # - {os: ubuntu-16.04, r: '3.6.3'} # Boydorr Server
          # - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    steps:
      # Checkout repo
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      # Setup R using r version in matrix
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      # Pandoc is not needed but here
      - uses: r-lib/actions/setup-pandoc@master

      # Save the package dependencies so they can be cached
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      # Cache the packages if not on windows
      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      # Install local registry
      - name: Install registry
        run: |
             /bin/bash -c "$(curl -fsSL https://data.scrc.uk/static/localregistry.sh)"
        shell: bash

      # Install system_requirements requirements on macOS
      - name: Install system requirements (macOS-latest)
        if: runner.os == 'macOS'
        run : |
              rm '/usr/local/bin/gfortran'
              brew install hdf5
              brew install gdal
        shell: bash

      # Install system requirements on ubuntu 20.04
      - name: Install system requirements (ubuntu-20.04)
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(remotes::system_requirements("ubuntu", "20.04"), sep = "\n")')
        shell: bash

      # Install R package dependencies
      - name: Install Dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      # Run CMD check
      - name: Run CMD check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          R_CHECK_SYSTEM_CLOCK: 0
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      # If anything fails upload results to artifacts
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
