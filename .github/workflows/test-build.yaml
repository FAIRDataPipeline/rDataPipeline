on:
  push:
    branches:
      - '*'
#  pull_request:
#    branches:
#      - master

jobs:
  R-CMD-check:
    # If the commit message isn't [skip ci]
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    steps:
      - uses: actions/checkout@v2  # Checkout repo
        with:
          persist-credentials: false
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@master

      - name: Save the package dependencies so they can be cached
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages, if not on Windows
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install R API system requirements (macOS-latest)
        if: runner.os == 'macOS'
        run : |
              rm '/usr/local/bin/gfortran'
              brew install hdf5
              brew install gdal
        shell: bash

      - name: Install R API system requirements (ubuntu-20.04)
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(remotes::system_requirements("ubuntu", "20.04"), sep = "\n")')
        shell: bash

      - name: Install R API dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Install local registry
        if: runner.os == 'macOS'
        run: /bin/bash -c "$(curl -fsSL https://data.scrc.uk/static/localregistry.sh)"

      - name: Run CMD check
        if: runner.os == 'macOS'
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          R_CHECK_SYSTEM_CLOCK: 0
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: runner.os == 'macOS'
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          remotes::install_cran("covr")
          covr::codecov()
        shell: Rscript {0}
